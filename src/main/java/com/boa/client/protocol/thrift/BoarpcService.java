package com.boa.client.protocol.thrift;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-05-30")
public class BoarpcService {

  public interface Iface {

    public String dispatcher(String consumer, String moduleName, String className, String functionName, java.util.List<String> params) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void dispatcher(String consumer, String moduleName, String className, String functionName, java.util.List<String> params, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String dispatcher(String consumer, String moduleName, String className, String functionName, java.util.List<String> params) throws org.apache.thrift.TException
    {
      send_dispatcher(consumer, moduleName, className, functionName, params);
      return recv_dispatcher();
    }

    public void send_dispatcher(String consumer, String moduleName, String className, String functionName, java.util.List<String> params) throws org.apache.thrift.TException
    {
      dispatcher_args args = new dispatcher_args();
      args.setConsumer(consumer);
      args.setModuleName(moduleName);
      args.setClassName(className);
      args.setFunctionName(functionName);
      args.setParams(params);
      sendBase("dispatcher", args);
    }

    public String recv_dispatcher() throws org.apache.thrift.TException
    {
      dispatcher_result result = new dispatcher_result();
      receiveBase(result, "dispatcher");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dispatcher failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void dispatcher(String consumer, String moduleName, String className, String functionName, java.util.List<String> params, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dispatcher_call method_call = new dispatcher_call(consumer, moduleName, className, functionName, params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dispatcher_call extends org.apache.thrift.async.TAsyncMethodCall<String> {
      private String consumer;
      private String moduleName;
      private String className;
      private String functionName;
      private java.util.List<String> params;
      public dispatcher_call(String consumer, String moduleName, String className, String functionName, java.util.List<String> params, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.consumer = consumer;
        this.moduleName = moduleName;
        this.className = className;
        this.functionName = functionName;
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dispatcher", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dispatcher_args args = new dispatcher_args();
        args.setConsumer(consumer);
        args.setModuleName(moduleName);
        args.setClassName(className);
        args.setFunctionName(functionName);
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dispatcher();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("dispatcher", new dispatcher());
      return processMap;
    }

    public static class dispatcher<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dispatcher_args> {
      public dispatcher() {
        super("dispatcher");
      }

      public dispatcher_args getEmptyArgsInstance() {
        return new dispatcher_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public dispatcher_result getResult(I iface, dispatcher_args args) throws org.apache.thrift.TException {
        dispatcher_result result = new dispatcher_result();
        result.success = iface.dispatcher(args.consumer, args.moduleName, args.className, args.functionName, args.params);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("dispatcher", new dispatcher());
      return processMap;
    }

    public static class dispatcher<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dispatcher_args, String> {
      public dispatcher() {
        super("dispatcher");
      }

      public dispatcher_args getEmptyArgsInstance() {
        return new dispatcher_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<String>() {
          public void onComplete(String o) {
            dispatcher_result result = new dispatcher_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            dispatcher_result result = new dispatcher_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dispatcher_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws org.apache.thrift.TException {
        iface.dispatcher(args.consumer, args.moduleName, args.className, args.functionName, args.params,resultHandler);
      }
    }

  }

  public static class dispatcher_args implements org.apache.thrift.TBase<dispatcher_args, dispatcher_args._Fields>, java.io.Serializable, Cloneable, Comparable<dispatcher_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dispatcher_args");

    private static final org.apache.thrift.protocol.TField CONSUMER_FIELD_DESC = new org.apache.thrift.protocol.TField("consumer", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MODULE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("moduleName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("className", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField FUNCTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("functionName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.LIST, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dispatcher_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dispatcher_argsTupleSchemeFactory();

    public String consumer; // required
    public String moduleName; // required
    public String className; // required
    public String functionName; // required
    public java.util.List<String> params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONSUMER((short)1, "consumer"),
      MODULE_NAME((short)2, "moduleName"),
      CLASS_NAME((short)3, "className"),
      FUNCTION_NAME((short)4, "functionName"),
      PARAMS((short)5, "params");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONSUMER
            return CONSUMER;
          case 2: // MODULE_NAME
            return MODULE_NAME;
          case 3: // CLASS_NAME
            return CLASS_NAME;
          case 4: // FUNCTION_NAME
            return FUNCTION_NAME;
          case 5: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONSUMER, new org.apache.thrift.meta_data.FieldMetaData("consumer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODULE_NAME, new org.apache.thrift.meta_data.FieldMetaData("moduleName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("className", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FUNCTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("functionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dispatcher_args.class, metaDataMap);
    }

    public dispatcher_args() {
    }

    public dispatcher_args(
      String consumer,
      String moduleName,
      String className,
      String functionName,
      java.util.List<String> params)
    {
      this();
      this.consumer = consumer;
      this.moduleName = moduleName;
      this.className = className;
      this.functionName = functionName;
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dispatcher_args(dispatcher_args other) {
      if (other.isSetConsumer()) {
        this.consumer = other.consumer;
      }
      if (other.isSetModuleName()) {
        this.moduleName = other.moduleName;
      }
      if (other.isSetClassName()) {
        this.className = other.className;
      }
      if (other.isSetFunctionName()) {
        this.functionName = other.functionName;
      }
      if (other.isSetParams()) {
        java.util.List<String> __this__params = new java.util.ArrayList<String>(other.params);
        this.params = __this__params;
      }
    }

    public dispatcher_args deepCopy() {
      return new dispatcher_args(this);
    }

    @Override
    public void clear() {
      this.consumer = null;
      this.moduleName = null;
      this.className = null;
      this.functionName = null;
      this.params = null;
    }

    public String getConsumer() {
      return this.consumer;
    }

    public dispatcher_args setConsumer(String consumer) {
      this.consumer = consumer;
      return this;
    }

    public void unsetConsumer() {
      this.consumer = null;
    }

    /** Returns true if field consumer is set (has been assigned a value) and false otherwise */
    public boolean isSetConsumer() {
      return this.consumer != null;
    }

    public void setConsumerIsSet(boolean value) {
      if (!value) {
        this.consumer = null;
      }
    }

    public String getModuleName() {
      return this.moduleName;
    }

    public dispatcher_args setModuleName(String moduleName) {
      this.moduleName = moduleName;
      return this;
    }

    public void unsetModuleName() {
      this.moduleName = null;
    }

    /** Returns true if field moduleName is set (has been assigned a value) and false otherwise */
    public boolean isSetModuleName() {
      return this.moduleName != null;
    }

    public void setModuleNameIsSet(boolean value) {
      if (!value) {
        this.moduleName = null;
      }
    }

    public String getClassName() {
      return this.className;
    }

    public dispatcher_args setClassName(String className) {
      this.className = className;
      return this;
    }

    public void unsetClassName() {
      this.className = null;
    }

    /** Returns true if field className is set (has been assigned a value) and false otherwise */
    public boolean isSetClassName() {
      return this.className != null;
    }

    public void setClassNameIsSet(boolean value) {
      if (!value) {
        this.className = null;
      }
    }

    public String getFunctionName() {
      return this.functionName;
    }

    public dispatcher_args setFunctionName(String functionName) {
      this.functionName = functionName;
      return this;
    }

    public void unsetFunctionName() {
      this.functionName = null;
    }

    /** Returns true if field functionName is set (has been assigned a value) and false otherwise */
    public boolean isSetFunctionName() {
      return this.functionName != null;
    }

    public void setFunctionNameIsSet(boolean value) {
      if (!value) {
        this.functionName = null;
      }
    }

    public int getParamsSize() {
      return (this.params == null) ? 0 : this.params.size();
    }

    public java.util.Iterator<String> getParamsIterator() {
      return (this.params == null) ? null : this.params.iterator();
    }

    public void addToParams(String elem) {
      if (this.params == null) {
        this.params = new java.util.ArrayList<String>();
      }
      this.params.add(elem);
    }

    public java.util.List<String> getParams() {
      return this.params;
    }

    public dispatcher_args setParams(java.util.List<String> params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONSUMER:
        if (value == null) {
          unsetConsumer();
        } else {
          setConsumer((String)value);
        }
        break;

      case MODULE_NAME:
        if (value == null) {
          unsetModuleName();
        } else {
          setModuleName((String)value);
        }
        break;

      case CLASS_NAME:
        if (value == null) {
          unsetClassName();
        } else {
          setClassName((String)value);
        }
        break;

      case FUNCTION_NAME:
        if (value == null) {
          unsetFunctionName();
        } else {
          setFunctionName((String)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((java.util.List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONSUMER:
        return getConsumer();

      case MODULE_NAME:
        return getModuleName();

      case CLASS_NAME:
        return getClassName();

      case FUNCTION_NAME:
        return getFunctionName();

      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONSUMER:
        return isSetConsumer();
      case MODULE_NAME:
        return isSetModuleName();
      case CLASS_NAME:
        return isSetClassName();
      case FUNCTION_NAME:
        return isSetFunctionName();
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dispatcher_args)
        return this.equals((dispatcher_args)that);
      return false;
    }

    public boolean equals(dispatcher_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_consumer = true && this.isSetConsumer();
      boolean that_present_consumer = true && that.isSetConsumer();
      if (this_present_consumer || that_present_consumer) {
        if (!(this_present_consumer && that_present_consumer))
          return false;
        if (!this.consumer.equals(that.consumer))
          return false;
      }

      boolean this_present_moduleName = true && this.isSetModuleName();
      boolean that_present_moduleName = true && that.isSetModuleName();
      if (this_present_moduleName || that_present_moduleName) {
        if (!(this_present_moduleName && that_present_moduleName))
          return false;
        if (!this.moduleName.equals(that.moduleName))
          return false;
      }

      boolean this_present_className = true && this.isSetClassName();
      boolean that_present_className = true && that.isSetClassName();
      if (this_present_className || that_present_className) {
        if (!(this_present_className && that_present_className))
          return false;
        if (!this.className.equals(that.className))
          return false;
      }

      boolean this_present_functionName = true && this.isSetFunctionName();
      boolean that_present_functionName = true && that.isSetFunctionName();
      if (this_present_functionName || that_present_functionName) {
        if (!(this_present_functionName && that_present_functionName))
          return false;
        if (!this.functionName.equals(that.functionName))
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetConsumer()) ? 131071 : 524287);
      if (isSetConsumer())
        hashCode = hashCode * 8191 + consumer.hashCode();

      hashCode = hashCode * 8191 + ((isSetModuleName()) ? 131071 : 524287);
      if (isSetModuleName())
        hashCode = hashCode * 8191 + moduleName.hashCode();

      hashCode = hashCode * 8191 + ((isSetClassName()) ? 131071 : 524287);
      if (isSetClassName())
        hashCode = hashCode * 8191 + className.hashCode();

      hashCode = hashCode * 8191 + ((isSetFunctionName()) ? 131071 : 524287);
      if (isSetFunctionName())
        hashCode = hashCode * 8191 + functionName.hashCode();

      hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
      if (isSetParams())
        hashCode = hashCode * 8191 + params.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(dispatcher_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConsumer()).compareTo(other.isSetConsumer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConsumer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consumer, other.consumer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetModuleName()).compareTo(other.isSetModuleName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModuleName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moduleName, other.moduleName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClassName()).compareTo(other.isSetClassName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClassName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.className, other.className);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFunctionName()).compareTo(other.isSetFunctionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFunctionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.functionName, other.functionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dispatcher_args(");
      boolean first = true;

      sb.append("consumer:");
      if (this.consumer == null) {
        sb.append("null");
      } else {
        sb.append(this.consumer);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("moduleName:");
      if (this.moduleName == null) {
        sb.append("null");
      } else {
        sb.append(this.moduleName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("className:");
      if (this.className == null) {
        sb.append("null");
      } else {
        sb.append(this.className);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("functionName:");
      if (this.functionName == null) {
        sb.append("null");
      } else {
        sb.append(this.functionName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dispatcher_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dispatcher_argsStandardScheme getScheme() {
        return new dispatcher_argsStandardScheme();
      }
    }

    private static class dispatcher_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<dispatcher_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dispatcher_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONSUMER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.consumer = iprot.readString();
                struct.setConsumerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MODULE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.moduleName = iprot.readString();
                struct.setModuleNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLASS_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.className = iprot.readString();
                struct.setClassNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FUNCTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.functionName = iprot.readString();
                struct.setFunctionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.params = new java.util.ArrayList<String>(_list0.size);
                  String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.params.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dispatcher_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.consumer != null) {
          oprot.writeFieldBegin(CONSUMER_FIELD_DESC);
          oprot.writeString(struct.consumer);
          oprot.writeFieldEnd();
        }
        if (struct.moduleName != null) {
          oprot.writeFieldBegin(MODULE_NAME_FIELD_DESC);
          oprot.writeString(struct.moduleName);
          oprot.writeFieldEnd();
        }
        if (struct.className != null) {
          oprot.writeFieldBegin(CLASS_NAME_FIELD_DESC);
          oprot.writeString(struct.className);
          oprot.writeFieldEnd();
        }
        if (struct.functionName != null) {
          oprot.writeFieldBegin(FUNCTION_NAME_FIELD_DESC);
          oprot.writeString(struct.functionName);
          oprot.writeFieldEnd();
        }
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.params.size()));
            for (String _iter3 : struct.params)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dispatcher_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dispatcher_argsTupleScheme getScheme() {
        return new dispatcher_argsTupleScheme();
      }
    }

    private static class dispatcher_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<dispatcher_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dispatcher_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetConsumer()) {
          optionals.set(0);
        }
        if (struct.isSetModuleName()) {
          optionals.set(1);
        }
        if (struct.isSetClassName()) {
          optionals.set(2);
        }
        if (struct.isSetFunctionName()) {
          optionals.set(3);
        }
        if (struct.isSetParams()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetConsumer()) {
          oprot.writeString(struct.consumer);
        }
        if (struct.isSetModuleName()) {
          oprot.writeString(struct.moduleName);
        }
        if (struct.isSetClassName()) {
          oprot.writeString(struct.className);
        }
        if (struct.isSetFunctionName()) {
          oprot.writeString(struct.functionName);
        }
        if (struct.isSetParams()) {
          {
            oprot.writeI32(struct.params.size());
            for (String _iter4 : struct.params)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dispatcher_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.consumer = iprot.readString();
          struct.setConsumerIsSet(true);
        }
        if (incoming.get(1)) {
          struct.moduleName = iprot.readString();
          struct.setModuleNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.className = iprot.readString();
          struct.setClassNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.functionName = iprot.readString();
          struct.setFunctionNameIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.params = new java.util.ArrayList<String>(_list5.size);
            String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.params.add(_elem6);
            }
          }
          struct.setParamsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class dispatcher_result implements org.apache.thrift.TBase<dispatcher_result, dispatcher_result._Fields>, java.io.Serializable, Cloneable, Comparable<dispatcher_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dispatcher_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dispatcher_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dispatcher_resultTupleSchemeFactory();

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dispatcher_result.class, metaDataMap);
    }

    public dispatcher_result() {
    }

    public dispatcher_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dispatcher_result(dispatcher_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public dispatcher_result deepCopy() {
      return new dispatcher_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public dispatcher_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dispatcher_result)
        return this.equals((dispatcher_result)that);
      return false;
    }

    public boolean equals(dispatcher_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(dispatcher_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dispatcher_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dispatcher_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dispatcher_resultStandardScheme getScheme() {
        return new dispatcher_resultStandardScheme();
      }
    }

    private static class dispatcher_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<dispatcher_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dispatcher_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dispatcher_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dispatcher_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dispatcher_resultTupleScheme getScheme() {
        return new dispatcher_resultTupleScheme();
      }
    }

    private static class dispatcher_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<dispatcher_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dispatcher_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dispatcher_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
